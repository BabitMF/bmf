name: UNITTEST CI
trigger:
  change:
    branches: [BabitMF_mirror]
jobs:
  py3_build_test:
    name: build_test
    image: ubuntu:22.04
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: prepare libraries
        commands:
          - export DEBIAN_FRONTEND=noninteractive
          - apt update
          - apt install -y make git pkg-config libssl-dev cmake binutils-dev libgoogle-glog-dev gcc g++ golang wget libgl1 python3 python3-pip
          - python3 -m pip install timeout_decorator numpy onnxruntime pytest opencv-python
          # The version of ffmpeg installed via apt is 4.2, but the current test results are based on version 4.4, so here we need to compile version 4.4 of ffmpeg from source code
          #apt install -y ffmpeg libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev
          # When running unit tests, nasm/yasm installed via apt will cause the indicators to be misaligned, so it needs to be compiled from source code
          #apt install -y nasm yasm
          - scripts/build_ffmpeg.sh nasm yasm x264 x265 opus
      - uses: actions/setup-proxy
      - name: build_env
        commands:
          # unit test
          - git submodule update --init --recursive
          - ./build.sh
          - apt-get update
          - apt-get install -y protobuf-compiler libgflags-dev libdw-dev libgoogle-glog-dev
          - pip3 install --upgrade pip
          - pip3 install timeout_decorator onnxruntime==1.18.0 numpy==1.26.4 requests opencv-python librosa
          - echo "build finished"
      - uses: actions/setup-proxy
      - name: run_test
        commands:
          - export C_INCLUDE_PATH=${C_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export LIBRARY_PATH=${LIBRARY_PATH}:$(pwd)/output/bmf/lib
          - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/output/bmf/lib:/usr/local/lib
          - export PYTHONPATH=$(pwd)/output/bmf/lib:$(pwd)/output
          - export PATH=${PATH}:$(pwd)/output/bmf/bin
          - export HMP_TEST_DATA_ROOT=$(pwd)/bmf/hmp/tests/data
          - $(pwd)/output/bmf/bin/module_manager install python_copy_module python my_module:my_module $(pwd)/output/test/customize_module v0.0.1
          - $(pwd)/output/bmf/bin/module_manager install cpp_copy_module c++ libcopy_module:CopyModule $(pwd)/output/test/c_module/lib v0.0.1
          - (cd $(pwd)/output/test/go_module && go build -buildmode c-shared -o lib/go_copy_module.so test_go_module.go)
          - $(pwd)/output/bmf/bin/module_manager install go_copy_module go go_copy_module:PassThrough $(pwd)/output/test/go_module/lib v0.0.1
          # download files
          - (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/files.tar.gz && tar xvf files.tar.gz)
          - (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/models.tar.gz && tar xvf models.tar.gz)
          # test bmf
          - (cd output/bmf/bin && ./test_bmf_module_sdk && ./test_bmf_engine && ./test_cpp_builder)
          #(cd output/bmf/bin && ./test_builtin_modules)
          - (cd output/demo/transcode               && python3 test_transcode.py)
          - (cd output/demo/edit                    && python3 test_edit.py)
          - (cd output/demo/predict                 && python3 predict_sample.py)
          - (cd output/demo/audio_robot_effect      && python3 test_robot_effect.py)
          - (cd output/test/audio_copy              && python3 test_simple.py)
          - (cd output/test/pre_module              && python3 test_pre_module.py)
          - (cd output/test/sync_mode               && python3 test_sync_mode.py)
          - (cd output/test/generator               && python3 test_generator.py)
          - (cd output/test/run_by_config           && python3 test_run_by_config.py)
          - (cd output/test/server                  && python3 test_server.py)
          - (cd output/test/c_module                && python3 test_video_c_module.py)
          - (cd output/test/dynamical_graph         && python3 dynamical_graph.py)
          - (cd output/test/av_log_buffer           && python3 test_av_log_buffer.py)
          - (cd output/test/push_data_into_graph    && python3 test_push_data.py)
          - (cd output/test/complex_edit_case       && python3 test_complex_case.py)
          - (cd output/test/complex_edit_case       && python3 test_compare_with_edit.py)
          - (cd output/test/test_merge_filters      && python3 test.py)
          # test hmp
          - (cd bmf/hmp/tests/data                  && ./gen.sh $(pwd)/../../../../output/files)
          - (cd bmf/hmp/tests                       && pytest)
      - name: run_go_test
        commands:
          - mkdir go
          - (cd go && mv ../output/files.tar.gz . && tar xvf files.tar.gz && rm -rf files.tar.gz)
          - $(pwd)/output/bmf/bin/module_manager install my_module python my_module:my_module $(pwd)/output/test/customize_module v0.0.1
          - export GOPATH=$PWD/go
          - export C_INCLUDE_PATH=${C_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export LIBRARY_PATH=${LIBRARY_PATH}:$(pwd)/output/bmf/lib
          - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/output/bmf/lib:/usr/local/lib
          - export PYTHONPATH=$(pwd)/output/bmf/lib:$(pwd)/output:$(pwd)/output/test
          - export PATH=${PATH}:$(pwd)/output/bmf/bin
          - export HMP_TEST_DATA_ROOT=$(pwd)/bmf/hmp/tests/data
          - mkdir -p $GOPATH/src/main
          - cp -r $PWD/bmf/test/test_go/* $GOPATH/src/main
          - cd $GOPATH/src/main
          - export GO111MODULE=on
          - go mod init
          - commit=$(cat ../../../gosdk_version.txt) && go get github.com/babitmf/bmf-gosdk@${commit}
          - go build main.go
          - python3 test_go.py

  conda_build_test:
    name: conda_build_test
    image: ubuntu:22.04
    envs:
      ENV: /home/code/.micromamba.sh
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: prepare conda environment
        commands:
          - apt update && apt install -y wget curl bzip2
          - curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/1.5.5 | tar -xvj bin/micromamba
      - uses: actions/setup-proxy
      - name: build_env
        commands:
          - ./bin/micromamba env create -f conda-env.yaml -y
          - eval "$(./bin/micromamba shell hook -s posix)"
          - micromamba activate bmf-test
          - ./build.sh non_local
          - echo "build finished"
      - name: run_test
        commands:
          - eval "$(./bin/micromamba shell hook -s posix)"
          - micromamba activate bmf-test
          - export C_INCLUDE_PATH=${C_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export LIBRARY_PATH=${LIBRARY_PATH}:$(pwd)/output/bmf/lib
          - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/output/bmf/lib:/usr/local/lib
          - export PYTHONPATH=$(pwd)/output/bmf/lib:$(pwd)/output
          - export PATH=${PATH}:$(pwd)/output/bmf/bin
          - export HMP_TEST_DATA_ROOT=$(pwd)/bmf/hmp/tests/data
          - $(pwd)/output/bmf/bin/module_manager install python_copy_module python my_module:my_module $(pwd)/output/test/customize_module v0.0.1
          - $(pwd)/output/bmf/bin/module_manager install cpp_copy_module c++ libcopy_module:CopyModule $(pwd)/output/test/c_module/lib v0.0.1
          - (cd $(pwd)/output/test/go_module && go build -buildmode c-shared -o lib/go_copy_module.so test_go_module.go)
          - $(pwd)/output/bmf/bin/module_manager install go_copy_module go go_copy_module:PassThrough $(pwd)/output/test/go_module/lib v0.0.1
          # download files
          - (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/files.tar.gz && tar xvf files.tar.gz && rm -rf files.tar.gz)
          - (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/models.tar.gz && tar xvf models.tar.gz && rm -rf models.tar.gz)
          # test bmf
          - (cd output/bmf/bin && ./test_bmf_module_sdk && ./test_bmf_engine && ./test_cpp_builder)
          #(cd output/bmf/bin && ./test_builtin_modules)
          - (cd output/demo/transcode               && python3 test_transcode.py)
          - (cd output/demo/edit                    && python3 test_edit.py)
          - (cd output/demo/predict                 && python3 predict_sample.py)
          - (cd output/test/audio_copy              && python3 test_simple.py)
          - (cd output/test/pre_module              && python3 test_pre_module.py)
          - (cd output/test/sync_mode               && python3 test_sync_mode.py)
          - (cd output/test/generator               && python3 test_generator.py)
          - (cd output/test/run_by_config           && python3 test_run_by_config.py)
          - (cd output/test/server                  && python3 test_server.py)
          - (cd output/test/c_module                && python3 test_video_c_module.py)
          - (cd output/test/dynamical_graph         && python3 dynamical_graph.py)
          - (cd output/test/av_log_buffer           && python3 test_av_log_buffer.py)
          - (cd output/test/push_data_into_graph    && python3 test_push_data.py)
          - (cd output/test/complex_edit_case       && python3 test_complex_case.py)
          - (cd output/test/complex_edit_case       && python3 test_compare_with_edit.py)
          # test hmp
          - (cd bmf/hmp/tests/data                  && ./gen.sh $(pwd)/../../../../output/files)
          - (cd bmf/hmp/tests                       && pytest)
  windows_job:
    name: BMF Windows CI
    image: "windows_2019_msys2:latest"
    runs-on:
      windows: {}
      cluster:
        execute-in-vm
    steps:
      - name: build and run test
        commands:
        - $bashPath = "C:\msys64\usr\bin\bash.exe"
        - |
          $bashCommand = @'
          export PATH=/usr/bin:/usr/lib:/usr/local/bin:/usr/local/lib:$PATH
          eval "$(./win_env/vcvarsall.sh x64)"
          export INCLUDE="${INCLUDE};C:\\msys64\\usr\\local\\include"
          pacman -S unzip ca-certificates --noconfirm
          wget https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2024-03-31-17-28/ffmpeg-n4.4.4-94-g5d07afd482-win64-gpl-shared-4.4.zip --no-check-certificate
          unzip ffmpeg-n4.4.4-94-g5d07afd482-win64-gpl-shared-4.4.zip
          mkdir -p /usr/local
          cp -r ffmpeg-n4.4.4-94-g5d07afd482-win64-gpl-shared-4.4/* /usr/local/
          ./build_win_lite.sh --msvc=2019 --preset=x64-Release bmf_ffmpeg
          cmake --build build_win_lite/x64-Release --config Release --target ALL_BUILD
          cmake --build build_win_lite/x64-Release --config Release --target ALL_BUILD
          cmake --build build_win_lite/x64-Release --config Release --target ALL_BUILD
          cp -r build_win_lite/x64-Release/output .
          python -m pip install timeout_decorator numpy onnxruntime pytest opencv-python
          export PYTHONHOME="$(dirname "$(which python)")"
          export C_INCLUDE_PATH=${C_INCLUDE_PATH}:$(pwd)/output/bmf/include
          export CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:$(pwd)/output/bmf/include
          export LIBRARY_PATH=${LIBRARY_PATH}:$(pwd)/output/bmf/lib
          export PYTHONPATH=$(pwd)/output/bmf/lib:$(pwd)/output
          export PATH=$(pwd)/3rd_party/win_rootfs/x64/usr/bin:$(pwd)/3rd_party/win_rootfs/x64/usr/lib:$(pwd)/output/bmf/bin:$(pwd)/output/bmf/lib:${PATH}
          ./output/bmf/bin/module_manager install python_copy_module python my_module:my_module $(pwd)/output/test/customize_module v0.0.1
          ./output/bmf/bin/module_manager install cpp_copy_module c++ copy_module:CopyModule $(pwd)/output/test/c_module/lib v0.0.1
          (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/files.tar.gz --no-check-certificate && tar xvf files.tar.gz && rm -rf files.tar.gz)
          (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/models.tar.gz --no-check-certificate && tar xvf models.tar.gz && rm -rf models.tar.gz)
          cd output/bmf/bin
          ./test_bmf_module_sdk.exe
          ./test_bmf_engine.exe --gtest_filter=-go_module.module_loader
          ./test_cpp_builder.exe
          cd -
          (cd output/demo/transcode               && python test_transcode.py)
          (cd output/demo/edit                    && python test_edit.py)
          (cd output/demo/predict                 && python predict_sample.py)
          (cd output/test/audio_copy              && python test_simple.py)
          (cd output/test/pre_module              && python test_pre_module.py)
          (cd output/test/sync_mode               && python test_sync_mode.py)
          (cd output/test/generator               && python test_generator.py)
          (cd output/test/run_by_config           && python test_run_by_config.py)
          (cd output/test/server                  && python test_server.py)
          (cd output/test/c_module                && python test_video_c_module.py)
          (cd output/test/dynamical_graph         && python dynamical_graph.py)
          (cd output/test/av_log_buffer           && python test_av_log_buffer.py)
          (cd output/test/push_data_into_graph    && python test_push_data.py)
          (cd output/test/complex_edit_case       && python test_complex_case.py)
          (cd output/test/complex_edit_case       && python test_compare_with_edit.py)
          (cd bmf/hmp/tests/data                  && ./gen.sh $(pwd)/../../../../output/files)
          (cd bmf/hmp/tests                       && python -m pytest)
          '@
        - echo $bashCommand | & $bashPath
  
  gpu_test_ci:
    name: gpu_test_ci
    image: babitmf/bmf_runtime:latest
    runs-on:
      cluster: "gpu_host"
    envs:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: all
      Force_Bash_As_Shell: "1"
    steps:
      - uses: actions/setup-proxy
      - name: build_env
        commands:
          - export current_dir=$(pwd)
          - |
            commands="
            rm -rf /root/bmf
            apt update
            git submodule update --init --recursive
            ./build.sh
            export LD_LIBRARY_PATH=\"\${LD_LIBRARY_PATH}:${current_dir}/output/bmf/lib\"
            export PYTHONPATH=\"\${PYTHONPATH}:${current_dir}/output/bmf/lib:${current_dir}/output\"
            (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/files.tar.gz --no-check-certificate && tar xvf files.tar.gz && rm -rf files.tar.gz)
            (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/models.tar.gz --no-check-certificate && tar xvf models.tar.gz && rm -rf models.tar.gz)
            (cd output/demo/gpu_module                    && python3 test_gpu_module.py)
            (cd output/demo/video_frame_extraction && cmake . && make -j8 && python3 video_frame_extraction.py)
            (cd output/demo/video_enhance && pip install basicsr==1.4.2 realesrgan && (sed -i '8s/from torchvision.transforms.functional_tensor import rgb_to_grayscale/from torchvision.transforms.functional import rgb_to_grayscale/' /usr/local/lib/python3.8/dist-packages/basicsr/data/degradations.py) && python3 enhance_demo.py)
            (cd output/demo/aesthetic_assessment && pip install onnxruntime && python3 aesthetic_assessment_demo.py)
            (cd output/demo/face_detect && cp ../../models/version-RFB-640.onnx . && trtexec --onnx=version-RFB-640.onnx --buildOnly --saveEngine=version-RFB-640.engine && cp version-RFB-640.engine ../../models && python3 detect_trt_sample.py)
            ./build.sh clean
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
            chmod a+x Miniconda3-latest-Linux-x86_64.sh
            ./Miniconda3-latest-Linux-x86_64.sh -b
            export PATH=\"/root/miniconda3/bin:\$PATH\"
            source /root/miniconda3/bin/activate
            conda create -n myenv python=3.12 numpy=2.0 -y
            conda init
            conda activate myenv
            ./build.sh
            export LD_LIBRARY_PATH=/root/miniconda3/envs/myenv/lib/python3.12/site-packages/nvidia/nvjitlink/lib:\${LD_LIBRARY_PATH}
            (cd output/demo/colorization_python && git clone https://github.com/eefengwei/DeOldify.git DeOldify && pip3 install -r ./DeOldify/requirements-colab.txt && pip3 install Ipython && pip3 install torch==2.5 torchvision torchaudio && mkdir -p ./DeOldify/models && wget -c https://huggingface.co/spensercai/DeOldify/resolve/main/ColorizeVideo_gen.pth -O ./DeOldify/models/ColorizeVideo_gen.pth && python3 deoldify_demo.py)
            "
          - bash -c "$commands"

  clang_build_test:
    name: clang_build_test
    image: ubuntu:22.04
    steps:
      - uses: actions/checkout
        inputs:
          depth: 1
      - name: prepare libraries
        commands:
          - export DEBIAN_FRONTEND=noninteractive
          - apt update
          - apt install -y lld llvm llvm-dev clang
          - apt install -y make git pkg-config libssl-dev cmake binutils-dev libgoogle-glog-dev gcc g++ golang wget libgl1 python3 python3-pip
          - python3 -m pip install timeout_decorator numpy onnxruntime pytest opencv-python
          # The version of ffmpeg installed via apt is 4.2, but the current test results are based on version 4.4, so here we need to compile version 4.4 of ffmpeg from source code
          #apt install -y ffmpeg libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev
          # When running unit tests, nasm/yasm installed via apt will cause the indicators to be misaligned, so it needs to be compiled from source code
          #apt install -y nasm yasm
          - scripts/build_ffmpeg.sh nasm yasm x264 x265 opus # ffmpeg is compiled with default compiler (gcc)
      - uses: actions/setup-proxy
      - name: build_env
        commands:
          # unit test
          - git submodule update --init --recursive
          - ./build.sh clang asan
          - apt-get update
          - apt-get install -y protobuf-compiler libgflags-dev libdw-dev libgoogle-glog-dev
          - pip3 install --upgrade pip
          - pip3 install timeout_decorator onnxruntime==1.18.0 numpy==1.26.4 requests opencv-python
          - echo "build finished"
      - name: run_cpp_test
        commands:
          - export C_INCLUDE_PATH=${C_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}:$(pwd)/output/bmf/include
          - export LIBRARY_PATH=${LIBRARY_PATH}:$(pwd)/output/bmf/lib
          - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/output/bmf/lib:/usr/local/lib
          - export PYTHONPATH=$(pwd)/output/bmf/lib:$(pwd)/output
          - export PATH=${PATH}:$(pwd)/output/bmf/bin
          - export HMP_TEST_DATA_ROOT=$(pwd)/bmf/hmp/tests/data
          - export ASAN_OPTIONS="exitcode=0" # TODO: fix the memory leaks and remove this environment variable
          - $(pwd)/output/bmf/bin/module_manager install python_copy_module python my_module:my_module $(pwd)/output/test/customize_module v0.0.1
          - $(pwd)/output/bmf/bin/module_manager install cpp_copy_module c++ libcopy_module:CopyModule $(pwd)/output/test/c_module/lib v0.0.1
          - (cd $(pwd)/output/test/go_module && CC=clang CXX=clang++ CGO_CXXFLAGS="-fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -fno-sanitize-recover=all" CGO_LDFLAGS="-Wl,--allow-shlib-undefined" go build -buildmode=c-shared -o lib/go_copy_module.so test_go_module.go)
          - $(pwd)/output/bmf/bin/module_manager install go_copy_module go go_copy_module:PassThrough $(pwd)/output/test/go_module/lib v0.0.1
          # download files
          - (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/files.tar.gz && tar xvf files.tar.gz)
          - (cd output && wget https://github.com/BabitMF/bmf/releases/download/files/models.tar.gz && tar xvf models.tar.gz)
          # test bmf
          - (cd output/bmf/bin && ./test_bmf_module_sdk && ./test_bmf_engine && ./test_cpp_builder) # runs fuzz tests in unit test mode
          #(cd output/bmf/bin && ./test_builtin_modules)
          - (cd output/bmf/bin && ./fuzz_ffmpeg_modules) # run the fuzz ffmpeg modules fuzz test in unit test mode
